# -*- coding: utf-8 -*-
"""ÁreaColhida.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SwdtX83rQma6Cjs2ZRanI-Mkv58nELG1
"""

from google.colab import files

# Faz upload manual para /content
uploaded = files.upload()

from google.colab import files
import pandas as pd
import unicodedata
import statistics
import sys

def normalizar(texto):
    if pd.isna(texto) or not texto:
        return ""
    return ''.join(c for c in unicodedata.normalize('NFD', str(texto)) if unicodedata.category(c) != 'Mn').lower().strip()
def carregar_dados_pandas():
    try:
        df = pd.read_csv("area.csv", encoding="utf-8")
    except FileNotFoundError:
        print("Arquivo 'area.csv' não encontrado.")
        return pd.DataFrame()
    except Exception as e:
        print(f"Ocorreu um erro inesperado ao carregar o arquivo com utf-8: {e}")
        try:
            df = pd.read_csv("area.csv", encoding="utf-16")
        except Exception as e_utf16:
            print(f"Ocorreu um erro inesperado ao carregar o arquivo com utf-16: {e_utf16}")
            return pd.DataFrame()
    print("Arquivo carregado com sucesso.")
    col_municipio = None
    for col in df.columns:
        col_normalizada = normalizar(col)
        if 'municipio' in col_normalizada or 'estado' in col_normalizada:
            col_municipio = col
            break
    if col_municipio is None:
        print("Aviso: Coluna de Município/Estado não encontrada. Verifique o cabeçalho.")
        if not df.empty:
             col_municipio = df.columns[0]
             print(f"Usando a primeira coluna ('{col_municipio}') como Município.")
        else:
            return pd.DataFrame()
    df.rename(columns={col_municipio: 'municipio_original'}, inplace=True)
    df['municipio'] = df['municipio_original'].apply(normalizar)
    df.drop(columns=['municipio_original'], inplace=True)
    id_vars = ['municipio']
    value_vars = [col for col in df.columns if col not in id_vars]
    df_long = df.melt(id_vars=id_vars, value_vars=value_vars, var_name='chave_original', value_name='area_str')
    def extrair_produto_ano(chave):
        if pd.isna(chave):
            return None, None
        chave_str = str(chave)
        produto = None
        ano = None
        if '(' in chave_str and ')' in chave_str:
            partes = chave_str.split("(")
            if len(partes) > 1:
                produto = partes[0].strip()
                ano_str = partes[1].split(')')[0].strip()
                try:
                    ano = int(ano_str)
                except ValueError:
                    pass
        elif ' - ' in chave_str:
             partes = chave_str.split(" - ")
             if len(partes) == 2:
                 produto = partes[0].strip()
                 ano_str = partes[1].strip()
                 try:
                     ano = int(ano_str)
                 except ValueError:
                      pass
        return normalizar(produto) if produto else None, ano
    df_long[['produto', 'ano']] = df_long['chave_original'].apply(
        lambda x: pd.Series(extrair_produto_ano(x))
    )
    df_long['area'] = df_long['area_str'].str.replace('.', '', regex=False).str.replace(',', '.', regex=False)
    df_long['area'] = pd.to_numeric(df_long['area'], errors='coerce')
    df_final = df_long.dropna(subset=['municipio', 'produto', 'ano', 'area']).copy()
    df_final['ano'] = df_final['ano'].astype(int)
    df_final.drop(columns=['chave_original', 'area_str'], inplace=True)
    print(f"Dados carregados e processados: {len(df_final)} registros válidos.")
    return df_final
def salvar_dados_pandas(df):
    if df.empty:
        print("DataFrame vazio. Nada para salvar.")
        return
    try:
        df.to_csv("area_processada.csv", index=False, encoding="utf-8")
        print("Dados salvos em 'area_processada.csv'.")
        try:
            files.download("area_processada.csv")
        except Exception as e:
            print(f"Não foi possível oferecer o download: {e}")
    except Exception as e:
        print(f"Ocorreu um erro ao salvar o arquivo: {e}")
def inserir_registro_pandas(df):
    print("\n--- Inserir Novo Registro de Área/Cultura ---")
    municipio = normalizar(input("Digite o nome do Município: "))
    produto = normalizar(input("Digite o nome da Cultura/Produto: "))
    try:
        ano = int(input("Digite o Ano (ex: 2020): "))
    except ValueError:
        print("Ano inválido. Por favor, digite um número inteiro.")
        return df
    try:
        area = float(input("Digite o valor da Área (em hectares, use ponto como separador decimal): ").replace(",", "."))
    except ValueError:
        print("Valor de Área inválido. Por favor, digite um número.")
        return df
    novo_registro = pd.DataFrame([{
        "municipio": municipio,
        "produto": produto,
        "ano": ano,
        "area": area
    }])
    df_atualizado = pd.concat([df, novo_registro], ignore_index=True)
    print("Registro adicionado com sucesso.")
    return df_atualizado
def listar_registros_pandas(df):
    if df.empty:
        print("Nenhum registro de área/cultura carregado.")
        return
    print("\n--- Menu de Listagem ---")
    print("1. Exibir os primeiros 5 e últimos 5 registros (padrão)")
    print("2. Exibir todos os registros")
    print("3. Voltar ao Menu Principal")
    while True:
        opcao_listagem = input("Escolha uma opção de listagem: ")
        if opcao_listagem == '1':
            print("\n--- Primeiros e Últimos Registros de Área por Cultura ---")
            display(df.sort_values(by=['municipio', 'produto', 'ano']))
            break
        elif opcao_listagem == '2':
            print("\n--- Todos os Registros de Área por Cultura ---")
            if len(df) > 1000:
                 print(f"Aviso: Exibir todos os {len(df)} registros pode gerar uma saída muito longa.")
                 confirmar_todos = input("Confirmar exibição de todos? (s/n): ").lower().strip()
                 if confirmar_todos != 's':
                     print("Exibição completa cancelada.")
                     continue
            pd.set_option('display.max_rows', None)
            pd.set_option('display.max_columns', None)
            display(df.sort_values(by=['municipio', 'produto', 'ano']))
            pd.reset_option('display.max_rows')
            pd.reset_option('display.max_columns')
            break
        elif opcao_listagem == '3':
            print("Voltando ao Menu Principal.")
            break
        else:
            print("Opção inválida. Por favor, escolha 1, 2 ou 3.")
def encontrar_registro_pandas(df, municipio, produto, ano):
    municipio_normalizado = normalizar(municipio)
    produto_normalizado = normalizar(produto)
    try:
        ano_int = int(ano)
    except ValueError:
        print("Ano inválido para busca.")
        return pd.DataFrame()
    registros_encontrados = df[
        (df['municipio'] == municipio_normalizado) &
        (df['produto'] == produto_normalizado) &
        (df['ano'] == ano_int)
    ]
    return registros_encontrados
def alterar_registro_pandas(df):
    print("\n--- Alterar Registro de Área/Cultura ---")
    municipio = input("Digite o Município do registro a alterar: ")
    produto = input("Digite o Produto/Cultura do registro a alterar: ")
    ano = input("Digite o Ano do registro a alterar: ")
    registros_para_alterar = encontrar_registro_pandas(df, municipio, produto, ano)
    if registros_para_alterar.empty:
        print("Registro não encontrado com os critérios fornecidos.")
        return df
    elif len(registros_para_alterar) > 1:
         print("Aviso: Múltiplos registros encontrados com estes critérios.")
         display(registros_para_alterar)
         print("Alterando a área de TODOS os registros encontrados.")
         pass
    indices_para_alterar = registros_para_alterar.index
    print(f"Registro(s) encontrado(s):")
    display(registros_para_alterar)
    try:
        nova_area = float(input("Digite o novo valor da Área: ").replace(",", "."))
        df.loc[indices_para_alterar, 'area'] = nova_area
        print("Área(s) atualizada(s) com sucesso.")
        return df
    except ValueError:
        print("Valor de Área inválido. A alteração não foi realizada.")
        return df
def consultar_registro_pandas(df):
    print("\n--- Consultar Registro de Área/Cultura ---")
    municipio = input("Digite o Município do registro a consultar: ")
    produto = input("Digite o Produto/Cultura do registro a consultar: ")
    ano = input("Digite o Ano do registro a consultar: ")
    registros_encontrados = encontrar_registro_pandas(df, municipio, produto, ano)
    if registros_encontrados.empty:
        print("Registro não encontrado com os critérios fornecidos.")
    else:
        print("\nRegistro(s) Encontrado(s):")
        display(registros_encontrados)
def excluir_registro_pandas(df):
    print("\n--- Excluir Registro de Área/Cultura ---")
    municipio = input("Digite o Município do registro a excluir: ")
    produto = input("Digite o Produto/Cultura do registro a excluir: ")
    ano = input("Digite o Ano do registro a excluir: ")
    registros_para_excluir = encontrar_registro_pandas(df, municipio, produto, ano)
    if registros_para_excluir.empty:
        print("Registro não encontrado com os critérios fornecidos.")
        return df
    indices_para_excluir = registros_para_excluir.index
    print(f"Registro(s) a ser(em) excluído(s):")
    display(registros_para_excluir)
    confirmacao = input("Confirmar exclusão? (s/n): ").lower().strip()
    if confirmacao == 's':
        df_atualizado = df.drop(indices_para_excluir).reset_index(drop=True)
        print("Registro(s) excluído(s) com sucesso.")
        return df_atualizado
    else:
        print("Exclusão cancelada.")
        return df
def analisar_media_pandas(df):
    if df.empty:
        print("Não há dados para calcular a média.")
        return
    print("\n--- Análise de Média da Área ---")
    filtrar = input("Deseja filtrar por Município, Produto ou Ano? (m/p/a/n para nenhum): ").lower().strip()
    df_filtrado = df.copy()
    filtro_aplicado = False
    if filtrar == 'm':
        municipio = normalizar(input("Digite o Município para filtrar a média: "))
        df_filtrado = df_filtrado[df_filtrado['municipio'] == municipio]
        filtro_aplicado = True
    elif filtrar == 'p':
        produto = normalizar(input("Digite o Produto para filtrar a média: "))
        df_filtrado = df_filtrado[df_filtrado['produto'] == produto]
        filtro_aplicado = True
    elif filtrar == 'a':
        try:
            ano = int(input("Digite o Ano para filtrar a média: "))
            df_filtrado = df_filtrado[df_filtrado['ano'] == ano]
            filtro_aplicado = True
        except ValueError:
            print("Ano inválido. Não foi possível aplicar o filtro.")
            return
    elif filtrar != 'n':
        print("Opção de filtro inválida.")
        return
    if df_filtrado.empty:
        print("Nenhum dado encontrado para o filtro especificado.")
        return
    media_area = df_filtrado['area'].mean()
    if filtro_aplicado:
         print(f"Média da Área (filtrada): {media_area:.2f}")
    else:
         print(f"Média geral da Área: {media_area:.2f}")
    if not filtro_aplicado:
         print("\nMédia da Área por Produto:")
         media_por_produto = df.groupby('produto')['area'].mean().sort_values()
         display(media_por_produto)
def analisar_maximo_pandas(df):
    if df.empty:
        print("Não há dados para encontrar o máximo.")
        return
    print("\n--- Análise de Área Máxima ---")
    filtrar = input("Deseja filtrar por Município, Produto ou Ano? (m/p/a/n para nenhum): ").lower().strip()
    df_filtrado = df.copy()
    filtro_aplicado = False
    if filtrar == 'm':
        municipio = normalizar(input("Digite o Município para filtrar o máximo: "))
        df_filtrado = df_filtrado[df_filtrado['municipio'] == municipio]
        filtro_aplicado = True
    elif filtrar == 'p':
        produto = normalizar(input("Digite o Produto para filtrar o máximo: "))
        df_filtrado = df_filtrado[df_filtrado['produto'] == produto]
        filtro_aplicado = True
    elif filtrar == 'a':
        try:
            ano = int(input("Digite o Ano para filtrar o máximo: "))
            df_filtrado = df_filtrado[df_filtrado['ano'] == ano]
            filtro_aplicado = True
        except ValueError:
            print("Ano inválido. Não foi possível aplicar o filtro.")
            return
    elif filtrar != 'n':
        print("Opção de filtro inválida.")
        return
    if df_filtrado.empty:
        print("Nenhum dado encontrado para o filtro especificado.")
        return
    max_area = df_filtrado['area'].max()
    print(f"Área Máxima (filtrada/geral): {max_area:.2f}")
    registros_max = df_filtrado[df_filtrado['area'] == max_area]
    print("Registro(s) com a Área Máxima:")
    display(registros_max)
def analisar_minimo_pandas(df):
    if df.empty:
        print("Não há dados para encontrar o mínimo.")
        return
    print("\n--- Análise de Área Mínima ---")
    filtrar = input("Deseja filtrar por Município, Produto ou Ano? (m/p/a/n para nenhum): ").lower().strip()
    df_filtrado = df.copy()
    filtro_aplicado = False
    if filtrar == 'm':
        municipio = normalizar(input("Digite o Município para filtrar o mínimo: "))
        df_filtrado = df_filtrado[df_filtrado['municipio'] == municipio]
        filtro_aplicado = True
    elif filtrar == 'p':
        produto = normalizar(input("Digite o Produto para filtrar o mínimo: "))
        df_filtrado = df_filtrado[df_filtrado['produto'] == produto]
        filtro_aplicado = True
    elif filtrar == 'a':
        try:
            ano = int(input("Digite o Ano para filtrar o mínimo: "))
            df_filtrado = df_filtrado[df_filtrado['ano'] == ano]
            filtro_aplicado = True
        except ValueError:
            print("Ano inválido. Não foi possível aplicar o filtro.")
            return
    elif filtrar != 'n':
        print("Opção de filtro inválida.")
        return
    if df_filtrado.empty:
        print("Nenhum dado encontrado para o filtro especificado.")
        return
    min_area = df_filtrado['area'].min()
    print(f"Área Mínima (filtrada/geral): {min_area:.2f}")
    registros_min = df_filtrado[df_filtrado['area'] == min_area]
    print("Registro(s) com a Área Mínima:")
    display(registros_min)
def analisar_comparacao_pandas(df):
    if df.empty:
        print("Não há dados para comparação.")
        return
    while True:
        print("\n--- Análise de Comparação ---")
        print("Comparar área entre:")
        print("1. Produtos (ao longo dos anos)")
        print("2. Anos (para um produto específico)")
        print("3. Municípios (para um produto/ano específico) - Comparar Todos")
        print("4. Municípios (para um produto/ano específico) - 5 Maiores e 5 Menores")
        print("5. Municípios (para um produto/ano específico) - Comparar Dois Específicos")
        print("6. Voltar")
        opcao_comparacao = input("Escolha uma opção de comparação: ")
        if opcao_comparacao == '1':
            print("\nMédia de Área por Produto (ao longo de todos os anos):")
            comparacao_produto = df.groupby('produto')['area'].mean().sort_values(ascending=False)
            display(comparacao_produto)
        elif opcao_comparacao == '2':
            produto_comp = normalizar(input("Digite o Produto para comparar áreas entre anos: "))
            df_produto = df[df['produto'] == produto_comp].copy()
            if df_produto.empty:
                print(f"Produto '{produto_comp}' não encontrado nos dados.")
                continue
            print(f"\nÁrea Total por Ano para o produto '{produto_comp}':")
            comparacao_ano = df_produto.groupby('ano')['area'].sum().sort_index()
            display(comparacao_ano)
        elif opcao_comparacao == '3':
             print("\n--- Comparar Todos os Municípios ---")
             produto_comp = normalizar(input("Digite o Produto para comparar áreas entre todos os municípios: "))
             try:
                 ano_comp = int(input("Digite o Ano para comparar áreas entre todos os municípios: "))
             except ValueError:
                 print("Ano inválido.")
                 continue
             df_filtro = df[(df['produto'] == produto_comp) & (df['ano'] == ano_comp)].copy()
             if df_filtro.empty:
                  print(f"Nenhum dado encontrado para o Produto '{produto_comp}' e Ano '{ano_comp}'.")
                  continue
             comparacao_municipio = df_filtro.groupby('municipio')['area'].sum().sort_values(ascending=False)
             if len(comparacao_municipio) > 100:
                 print(f"Aviso: Exibir todos os {len(comparacao_municipio)} municípios pode gerar uma saída muito longa.")
                 confirmar_todos = input("Confirmar exibição de todos? (s/n): ").lower().strip()
                 if confirmar_todos != 's':
                     print("Exibição completa cancelada.")
                     continue
                 pd.set_option('display.max_rows', None)
                 pd.set_option('display.max_columns', None)
             print(f"\nComparação de Área para o Produto '{produto_comp}' no Ano '{ano_comp}' por Município (Todos):")
             display(comparacao_municipio)
             if len(comparacao_municipio) > 100 and confirmar_todos == 's':
                 pd.reset_option('display.max_rows')
                 pd.reset_option('display.max_columns')
        elif opcao_comparacao == '4':
            print("\n--- Comparar 5 Maiores e 5 Menores Municípios ---")
            produto_comp = normalizar(input("Digite o Produto: "))
            try:
                ano_comp = int(input("Digite o Ano: "))
            except ValueError:
                print("Ano inválido.")
                continue
            df_filtro = df[(df['produto'] == produto_comp) & (df['ano'] == ano_comp)].copy()
            if df_filtro.empty:
                 print(f"Nenhum dado encontrado para o Produto '{produto_comp}' e Ano '{ano_comp}'.")
                 continue
            comparacao_municipio_total = df_filtro.groupby('municipio')['area'].sum()
            if len(comparacao_municipio_total) < 10:
                 print(f"Apenas {len(comparacao_municipio_total)} município(s) encontrado(s) para esta combinação de Produto/Ano. Exibindo todos.")
                 display(comparacao_municipio_total.sort_values(ascending=False))
            else:
                 print(f"\nOs 5 Municípios com MAIOR Área para o Produto '{produto_comp}' no Ano '{ano_comp}':")
                 top_5 = comparacao_municipio_total.sort_values(ascending=False).head(5)
                 display(top_5)
                 print(f"\nOs 5 Municípios com MENOR Área para o Produto '{produto_comp}' no Ano '{ano_comp}':")
                 bottom_5 = comparacao_municipio_total.sort_values(ascending=True).head(5)
                 display(bottom_5)
        elif opcao_comparacao == '5':
            print("\n--- Comparar Dois Municípios Específicos ---")
            produto_comp = normalizar(input("Digite o Produto: "))
            try:
                ano_comp = int(input("Digite o Ano: "))
            except ValueError:
                print("Ano inválido.")
                continue
            df_filtro = df[(df['produto'] == produto_comp) & (df['ano'] == ano_comp)].copy()
            if df_filtro.empty:
                 print(f"Nenhum dado encontrado para o Produto '{produto_comp}' e Ano '{ano_comp}'.")
                 continue
            municipios_disponiveis = df_filtro['municipio'].unique()
            if len(municipios_disponiveis) < 2:
                 print(f"Apenas {len(municipios_disponiveis)} município(s) encontrado(s) para esta combinação de Produto/Ano. Não é possível comparar dois.")
                 if len(municipios_disponiveis) == 1:
                     print(f"Município encontrado: {municipios_disponiveis[0]}")
                 continue
            print("\nMunicípios disponíveis:")
            print(", ".join(municipios_disponiveis))
            municipio1_str = input("Digite o nome do PRIMEIRO Município: ")
            municipio2_str = input("Digite o nome do SEGUNDO Município: ")
            municipio1_norm = normalizar(municipio1_str)
            municipio2_norm = normalizar(municipio2_str)
            if municipio1_norm == municipio2_norm:
                print("Os municípios digitados são os mesmos. Por favor, digite dois municípios diferentes.")
                continue
            df_comparar = df_filtro[df_filtro['municipio'].isin([municipio1_norm, municipio2_norm])].copy()
            if df_comparar.empty:
                print("Nenhum dos municípios digitados foi encontrado para esta combinação de Produto/Ano.")
                continue
            elif len(df_comparar['municipio'].unique()) < 2:
                 print(f"Apenas um dos municípios ('{df_comparar['municipio'].iloc[0]}') foi encontrado para esta combinação de Produto/Ano.")
                 continue
            print(f"\nComparação de Área para o Produto '{produto_comp}' no Ano '{ano_comp}' entre '{municipio1_str}' e '{municipio2_str}':")
            comparacao_municipio = df_comparar.groupby('municipio')['area'].sum().sort_values(ascending=False)
            display(comparacao_municipio)
        elif opcao_comparacao == '6':
            print("Voltando ao Menu de Análise.")
            break
        else:
            print("Opção inválida.")
def analisar_contagem_pandas(df):
    if df.empty:
        print("Não há dados para contagem.")
        return
    print("\n--- Análise de Contagem por Categoria ---")
    print("Contar por:")
    print("1. Município")
    print("2. Produto")
    ("3. Ano")
    print("4. Voltar")
    opcao_contagem = input("Escolha uma categoria para contagem: ")
    if opcao_contagem == '1':
        print("\nContagem de Registros por Município:")
        contagem_municipio = df['municipio'].value_counts()
        display(contagem_municipio)
    elif opcao_contagem == '2':
        print("\nContagem de Registros por Produto:")
        contagem_produto = df['produto'].value_counts()
        display(contagem_produto)
    elif opcao_contagem == '3':
        print("\nContagem de Registros por Ano:")
        contagem_ano = df['ano'].value_counts().sort_index()
        display(contagem_ano)
    elif opcao_contagem == '4':
        print("Voltando ao Menu de Análise.")
    else:
        print("Opção inválida.")
def analisar_pandas(df):
    if df.empty:
        print("\nNão há registros para analisar.")
        return
    while True:
        print("\n--- Menu de Análise ---")
        print("1. Estatísticas de Média")
        print("2. Estatísticas de Máximo")
        print("3. Estatísticas de Mínimo")
        print("4. Comparação")
        print("5. Contagem por Categoria")
        print("6. Voltar ao Menu Principal")
        opcao_analise = input("Escolha uma opção de análise: ")
        if opcao_analise == "1":
            analisar_media_pandas(df)
        elif opcao_analise == "2":
            analisar_maximo_pandas(df)
        elif opcao_analise == "3":
            analisar_minimo_pandas(df)
        elif opcao_analise == "4":
            analisar_comparacao_pandas(df)
        elif opcao_analise == "5":
            analisar_contagem_pandas(df)
        elif opcao_analise == "6":
            print("Voltando ao Menu Principal.")
            break
        else:
            print("Opção inválida. Por favor, escolha uma opção de 1 a 6.")
def menu_pandas():
    df_registros = carregar_dados_pandas()
    if df_registros.empty:
        print("\nAviso: Não foi possível carregar dados válidos do arquivo 'area.csv'.")
        print("O DataFrame está vazio. Você pode adicionar registros manualmente.")
    while True:
        print("\n--- Menu de Dados de Área por Cultura (Pandas) ---")
        print(f"Registros carregados: {len(df_registros)}")
        print("1. Listar todos os registros")
        print("2. Inserir novo registro")
        print("3. Alterar registro")
        print("4. Consultar registro")
        print("5. Excluir registro")
        print("6. Salvar dados")
        print("7. Análise de Dados")
        print("8. Sair")
        opcao = input("Escolha uma opção: ")
        if opcao == "1":
            listar_registros_pandas(df_registros)
        elif opcao == "2":
            df_registros = inserir_registro_pandas(df_registros)
        elif opcao == "3":
            df_registros = alterar_registro_pandas(df_registros)
        elif opcao == "4":
            consultar_registro_pandas(df_registros)
        elif opcao == "5":
            df_registros = excluir_registro_pandas(df_registros)
        elif opcao == "6":
             salvar_dados_pandas(df_registros)
        elif opcao == "7":
            analisar_pandas(df_registros)
        elif opcao == "8":
          print("Saindo do programa.")
          break
        else:
            print("Opção inválida.")
menu_pandas()